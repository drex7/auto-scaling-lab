AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy an Apache web server that dynamically adjusts capacity based on CPU load.


Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  SubnetCidrPublic1:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet 1
  SubnetCidrPublic2:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for public subnet 2
  SubnetCidrPrivate1:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet 1
  SubnetCidrPrivate2:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for private subnet 2
  InstanceType: 
    Type: String
    Description: The EC2 instance type
    Default: t2.micro
  CPUPolicyTargetValue:
    Type: String
    Description: The target utilization for the CPU metric
    Default: '50'
  ImageID:
    Type: String
    Default: "ami-02b7d5b1e55a7b5f1"
  ProjectTag:
    Type: String
    Default: auto-scaling-lab

Resources:
  # IAM Role for EC2 Instances (for SSM)
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: AutoScalingLabEC2Role
        - Key: Project
          Value: !Sub "${ProjectTag}"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  ASGLabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ASGLabVPC
        - Key: Project
          Value: !Sub "${ProjectTag}"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ASGLabVPC
      CidrBlock: !Ref SubnetCidrPrivate1
      AvailabilityZone: !Select [0, !GetAZs  ""]
      Tags:
        - Key: Name
          Value: ASGPrivateSubnet1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ASGLabVPC
      CidrBlock: !Ref SubnetCidrPrivate2
      AvailabilityZone: !Select [1, !GetAZs  ""]
      Tags:
        - Key: Name
          Value: ASGPrivateSubnet2
   
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ASGLabVPC
      CidrBlock: !Ref SubnetCidrPublic1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs  ""]
      Tags:
        - Key: Name
          Value: ASGPublicSubnet1
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ASGLabVPC
      CidrBlock: !Ref SubnetCidrPublic2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs  ""]
      Tags:
        - Key: Name
          Value: ASGPublicSubnet2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AutoScalingLabIGW
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ASGLabVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ASGLabVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server
      VpcId: !Ref ASGLabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServerSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Application Load Balancer
      VpcId: !Ref ASGLabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  AutoScalingLabTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AutoScalingLabTargetGroup
      VpcId: !Ref ASGLabVPC
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2          
      Tags:
        - Key: Name
          Value: AutoScalingLabTargetGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Description: Listener for the Application Load Balancer
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AutoScalingLabTargetGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # --- EC2 Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref ImageID
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        KeyName: EC2KeyPair
        SecurityGroupIds: 
          - !Ref WebServerSecurityGroup
        TagSpecifications:
          - ResourceType: "launch-template"
            Tags:
            - Key: "Project"
              Value: !Sub "${ProjectTag}"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd stress
            systemctl start httpd
            systemctl enable httpd
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            IP_ADDRESS="$(hostname -l | cut -d" " -f1)"

            cat > /var/www/html/index.html <<EOF
            <!DOCTYPE html>
            <html>
              <head>
                <title>Auto Scaling Lab</title>
              </head>
              <body>
                <h1>Hello from $IP_ADDRESS / $INSTANCE_ID</h1>
                <button onclick="stressCPU()">Stress CPU</button>
                <script>
                  function stressCPU() {
                    fetch('/stress', { method: 'POST' })
                      .then(response => response.text())
                      .then(data => alert(data))
                      .catch(error => console.error('Error:', error));
                  }
                </script>
              </body>
            </html>
            EOF
            cat > /var/www/html/stress.sh <<EOF
            #!/bin/bash
            stress --cpu 1 --timeout 60
            echo "CPU stress test completed"
            EOF
            chmod +x /var/www/html/stress.sh
            cat > /etc/httpd/conf.d/stress.conf <<EOF
            <VirtualHost *:80>
                DocumentRoot /var/www/html
                <Location /stress>
                  ProxyPass "unix:/tmp/stress.sock|fcgi://localhost/var/www/html/stress.sh"
                </Location>
            </VirtualHost>
            EOF
            systemctl restart httpd
    
  AutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '300'
      TargetTrackingConfiguration:
        TargetValue: !Ref CPUPolicyTargetValue
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
      
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref AutoScalingLabTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: AutoScalingLabInstance
          PropagateAtLaunch: true

Outputs:
  ALBEndpoint:
    Description: URL of the Application Load Balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
